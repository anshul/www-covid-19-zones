"""Represents an unconstrained type. No coercion is performed"""
scalar Any

type CaseCount {
  count: Int!
  zoneName: String!
}

type Cases {
  label: String!
  name: String!
  value: Int!
}

"""The connection type for Cases."""
type CasesConnection {
  """A list of edges."""
  edges: [CasesEdge]

  """A list of nodes."""
  nodes: [Cases]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type CasesEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Cases
}

type CompareStats {
  cumulativeConfirmedCases: LineChart!
  newCases: LineChart!
  totalCases: [CaseCount!]!
  zones: [Zone!]!
}

type HomeData {
  cases(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): CasesConnection!
}

type LineChart {
  data: [Any!]!
  lineKeys: [String!]!
  xAxisKey: String!
}

type Mutation {
  """An example field added by the generator"""
  testField: String!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

type Query {
  compare(codes: [String!]!): CompareStats!
  home: HomeData!

  """Zone data"""
  zone(slug: String!): Zone!
  zoneStats(code: String!): ZoneStats!

  """List of all zones"""
  zonesList(searchQuery: String): [Zone!]!
}

type Zone {
  area: String
  code: String!
  density: String
  name: String!
  parentZone: Zone
  pop: String
  searchName: String
  slug: String!
  zoneMd: String
}

type ZoneStats {
  cumulativeConfirmedCases: LineChart!
  newCases: LineChart!
  totalCases: Int!
  zone: Zone!
}

